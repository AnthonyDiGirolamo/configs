*tcalc.txt*         A ruby-based RPN calculator for vim
                    Author: Tom Link, micathom at gmail com

It turns out that ruby is pretty good at maths and deals well with 
complex or rational numbers etc. Anyway, in certain occasions a postfix 
syntax and a stack are better suited for calculations than ruby's infix 
syntax. So, here comes ...

:TCalc[!]
    A small ruby-based[*] RPN-calculator, a simple ASCII function 
    plotter, and stack-based playground :-).

The tcalc.rb script can also be used as a stand-alone calculator (with 
optional support for curses and readline). Run "tcalc --help" for 
information on the command-line options.

Input:
    - Numbers (anything that starts with "-" or a decimal)
    - Strings (anything that matches /^"(.*?)"$/)
        - Be aware that the strings and numbers get evaluated by ruby. 
          You can thus execute ruby code by input like: -1;p'foo'
    - Methods & constants of the following classes are available:
        Float    :: http://www.ruby-doc.org/core/classes/Float.html
        Complex  :: http://www.ruby-doc.org/core/classes/Complex.html
        Rational :: http://www.ruby-doc.org/core/classes/Rational.html
        Integer  :: http://www.ruby-doc.org/core/classes/Integer.html
        Matrix   :: http://www.ruby-doc.org/core/classes/Matrix.html
        Vector   :: http://www.ruby-doc.org/core/classes/Vector.html
        Math     :: http://www.ruby-doc.org/core/classes/Math.html
    - #N (pull the item at position N to the top)
    - Call words: WORD[COUNT][@ARRITY][,ARGUMENT]
        - If COUNT is "#", the top element will be used.
    - Enter, escape => exit

Tokens are separated by blanks (à la forth). The blanks between the 
words thus are significant.


[*] For use with VIM, built-in ruby support (:echo has('ruby')) is 
required.


-----------------------------------------------------------------------
Install~                                            *tcalc-install*

As VIM-plugin:
Extract the archive's contents to ~/vimfiles (or ~/.vim).

Stand-alone ruby script:
Copy the file ruby/tcalc.rb to your path (you could also rename it to 
tcalc).


-----------------------------------------------------------------------
Startup~                                            *tcalc-startup*

At startup, two files are read:
    1. ~/.tcalc/config.rb ... A ruby file
    2. ~/.tcalc/init.tca  ... The initial input queue


-----------------------------------------------------------------------
Commands~                                           *tcalc-commands*

Every method/word/command may take a count as optional argument to 
repeat the command n times. E.g. "+3" will sum up the top 3 numbers, 
"y3" will copy the top 3 items in the "*" register.

The calculator has command-line completion enabled. But:
    - This only works if you input single tokens at a time, i.e. 
      "0.5<cr>sin<cr>".
    - Be aware that not every method is useful in the context of this 
      plugin.

                                                    *tcalc-words*
Words:
    VARIABLE=
    -> VARIABLE
        Set a variable (e.g. let,WORD) to the value of the top element, 
        the variable can be referenced by it name.
        EXAMPLE: >
            1 a=
            1 -> a
<
    :WORD ... ;
        Define a new word (the ending ";" token must be in the input 
        queue)
        EXAMPLE: >
            :fib dup 1 > ( dup 1 - fib swap 2 - fib + ) if ;
<
    ( ... ) 'WORD define
        The "define" command provides an alternative way to define new 
        words. In opposition to the above form, this form can  be used 
        to define word-local (i.e. nested) words.

        These two forms are mostly identical. The main difference is 
        that with the "define" command the definition and the name are 
        first put on the stack and could be manipulated or passed around 
        like any other data until the "define" words uses them to make 
        up a new word. In the above forth-like form (:WORD), the scanner 
        decides that a new word is to be defined and scans the input 
        quere for the closing ";".

    begin ... end
        "begin" creates a new scope (actually a new local dictionary) 
        with local variables and words. Variables/words are dynamically 
        bound (as in certain older lisp dialects). "end" re-establishes 
        the previous context, i.e. it removes any local words/variables.

    rm, unlet
        Remove a word (e.g. rm,WORD)

    ls
        List words. Words beginning with an underscore will be excluded 
        from the list as they are considered to be "internal" data 
        structures (see also below).

    The main difference between "variable" and "word" definitions is 
    that word bodies are enclosed in "begin ... end". The following 
    forms are equivalent: >

        ( begin 2 ** end ) square=
        ( begin 2 ** end ) -> square
        (( ) 2 ** ) -> square
        ( 2 ** ) 'square define
        :square 2 ** ;

        :square ( a:Numeric ) args a 2 ** ;
        (( a:Numeric ) a 2 ** ) -> square
< 
    The body ( ... ) is an array of tokens.

    Word names enclosed in underscores are treated slightly differently 
    on certain occassions. E.g. the stack and the input queue actually 
    are such special variables named "__STACK__" and "__IQUEUE__". The 
    current dictionary is accessible as "__WORDS__" (the special 
    variables are excluded though in order to avoid circular data 
    structures that make ruby ... well, crash). Use with care (if at 
    all).

    Example: >
        /* push some values onto the stack */
        3 2
        /* push a shallow copy of the stack onto the stack */
        __STACK__
        /* assign the stack to some variable */
        mystack=
        /* clear the stack */
        clear
        /* do something else */
        5 6 + a=
        /* get back the old stack */
        [ mystack ] __STACK__=
        /* simply push the values of the old stack */
        mystack


                                                    *tcalc-stack*
Stack (N is an optional numeric argument, which defaults to 1):
    pN, popN, .
        Pop/remove item(s)

    dN, dupN
        Duplicate the top item

    cN, copyN
        Push a copy of element N

    rN, rotN
        Rotate, push the top item to the back

    sN, swapN
        Reverse slice (actually rather a "mirror").
        
        The use of rot and dup might not be exactly what one would 
        expect from these commands.

    gN, groupN, ArrayN
        Group the top N elements on the stack as array
        EXAMPLE: >
            1 2 3 Array3
            /* equivalent to */
            1 2 3 3 Array#
            /* equivalent to */
            [ 1 2 3 ]
            => [1, 2, 3]
< 
    u, ungroup
        Push the elemnts of an array onto the stack (splice)

    clear
        Clear the stack


                                                    *tcalc-view*
View:
    hex, HEX, oct, bin, dec, float
        Change the way numbers are formatted. Calculations are always made 
        with floats.

    print, inspect
        Use ruby's inspect. (DEFAULT)

    format,%FORMAT
        Define a format.


                                                    *tcalc-control*
Control:
    ( ... )
        Push unprocessed tokens on the stack (as array).

    (( ARGUMENTS ) ... )
        This is equivalent to: >
            ( begin ( ARGUMENTS ) args ... end )
<       You can define block-local variables (see "args" for details).

    recapture, do
        Prepend unprocessed tokens on the stack to the input queue -- 
        which will then be processed in the next loop.
        EXAMPLE: >
            :adder_two ( 2 + ) ;
            3 adder_two do
            => 5
< 
    #N,METHOD
        Send METHOD to element N (any ruby object) on the stack. Usually 
        only methods from math-related classes are recognized. In order 
        to send methods to an array, you currently have to use this 
        form.

        This will push the new value on the stack. Certain methods 
        (depending on ruby conventions) will also modify the object.

        You can also send methods to variables.
        EXAMPLE: >
            [ 1 2 ] a= 3 #a,<< .
            ls
            => a: 1.0 2.0 3.0

            ( 2 1 + ) ( 3 * ) #1,concat do
            => 9
<
    if, ifelse (CONDITION IFBLOCK ELSEBLOCK)
        Feed IFBLOCK or ELSEBLOCK to the input queue depending on 
        CONDITION.

    assert
        Display an error if the stack doesn't match the assertion. The last 
        element on the stack is the assertion (either a string or an 
        array of unprocessed tokens/strings).
        Example: With stack: >
            /* Check if the top element is 2.0 */
            2 '2.0 assert
            => true

            /* Check if the top element match */
            1 'Numeric assert
            => true

            /* Check if the two top elements match */
            1 2 ( Numeric Numeric ) assert
            => true
            1 2 ( String String ) assert
            => Expected String, but got 2.0
< 
    args
        Similar to assert but provides for named arguments.
        Example: Instead of >
            :binom ( Numeric Numeric ) args
                copy1 fak rot2
                dup fak rot2 - fak *
                /
            ;
<       you could write: >
            :binom ( n:Numeric k:Numeric ) args
                n fak
                k fak n k - fak *
                /
            ;
<       The function could have been also defined in ruby of course.

    validate
        Like assert but push the result of the check as boolean on the stack.
        Example: >
            'foo 'Numeric validate ( 1 + ) ( . ) ifelse
            => empty stack
            2 'Numeric validate ( 1 + ) ( . ) ifelse
            => 3.0
< 
    /* ... */
        Comments: Ignore tokens.


                                                    *tcalc-VIM*
VIM Integration:
    y, yank
        Copy the top N items to a register (* by default). This command 
        takes a register as optional argument, e.g., "y,e"

    p, puts
        Print the top item.

    source
        Read input from a file.

    require
        Load a ruby library.


                                                    *tcalc-array*
Arrays:
    [ item1 item2 ... ]
        Push processed items as array.

    ARRAY INDEX at
        Push the item at INDEX. In a multi-dimensional array, INDEX can be an 
        array.

        Example: >
            [ 'a 'b 'c ] 1 at
            => "b"

        < BTW this actually is the same as: >
            ( a b c ) 1 at
    
    FROM TO STEP Sequence
        Generate a sequence of number (an Array)
        Example: >
            1 2 0.5 Sequence
            => [1, 1.5, 2]
< 
    [ ARRAY ] ( BLOCK ) map
        Run BLOCK over the elements in ARRAY and push the results onto 
        the stack as new array.
        Example: >
            [ 1 2 3 ] ( 2 ** ) map
            => [1.0, 4.0, 9.0]
<         
    [ ARRAY ] ( BLOCK ) mmap
        Similar to map but store tuples of (x,y) values. The block can 
        also return more than one item.
        Example: >
            [ 1 2 3 ] ( 2 ** ) mmap
            => [[1, 1.0], [2, 4.0], [3, 9.0]]
<  
    [ ARRAY ] ( BLOCK ) any?
        Check if any the elements in the array are true for BLOCK.
        Example: >
            [ 1 2 3 ] ( 2 > ) any? ( 1 ) ( -1 ) ifelse
            => 1.0
<  
    [ ARRAY ] ( BLOCK ) all?
        Check if all the elements in the array are true for BLOCK.
        Example: >
            [ 1 2 3 ] ( 2 > ) all? ( 1 ) ( -1 ) ifelse
            => -1.0
<  
    MMAP YDIM XDIM plot
        A simplicistic ASCII function plotter.
        VIM: The plot command takes a register as optional argument 
        (e.g. "plot,a").
        NOTE: I admit there is some room for improvements.
        Example: >
            0 2 PI * 0.1 seq (( a: ) a sin a cos 0 ) mmap 10 10 plot
            =>
                  1.00: ****   1356890                       ***
                  0.78:    **80      134                   **   
                  0.56:    57 **        6                **     
                  0.33:   34    *        79            **       
                  0.11: 02+++++++*+++++++++0++++++++++*+++++++++
                 -0.11:           **        23      ***       01
                 -0.33:            ***       456   **        99 
                 -0.56:              **        78**        68   
                 -0.78:                **      **02      345    
                 -1.00:                  *******   356801       
                   .    +      +     +     +     +      +     ++
                   .    0      1     2     3     4      5     66
<  
    ARRAY ELEMENT array_push
    ARRAY array_pop
    ARRAY ELEMENT array_unshift
    ARRAY array_shift
        These commands are only using when working with array on the 
        stack that aren't assigned to a word.

    ARRAY array_empty?


                                                    *tcalc-numbers*
Rational numbers:
    NUMERATOR DENOMINATOR Rational
        Example: >
            1 2 Rational


Complex numbers:
    REAL IMAGINARY Complex
        Example: >
            2 3 Complex


Integers:
    NUMBER Integer
        This isn't really useful as the number will be soon converted back to a 
        float.


                                                    *tcalc-matrix*
Matrix:
    ARRAY Matrix
        Example: >
            [ [ 2 1 ] [ -1 1 ] ] Matrix

            d [ 0 1 ] at
            => 1.0

            d determinant
            => 3.0


Known Problems:
    - One cannot send methods containing digits in their names (eg log10).



-----------------------------------------------------------------------
Examples~

Simple-minded primes generator: >

    :primes ( top:Numeric ) args
        (( known_primes:Array current:Numeric top:Numeric )
            current top <=
                ( 
                    [ known_primes ] (( prime:Numeric ) current prime % 0 != ) all?
                        ( [ known_primes current ] )
                        ( [ known_primes ] )
                        ifelse
                    current 2 +
                    top
                    primes_helper
                )
                (
                    [ known_primes ]
                )
                ifelse
        ) -> primes_helper
        [ 2 ] 3 top primes_helper
    ;


========================================================================
Contents~

        :TCalc ............... |:TCalc|
        g:tcalc_initialize ... |g:tcalc_initialize|
        g:tcalc_lines ........ |g:tcalc_lines|
        g:tcalc_dir .......... |g:tcalc_dir|
        tcalc#Calculator ..... |tcalc#Calculator()|
        tcalc#Eval ........... |tcalc#Eval()|
        tcalc#Complete ....... |tcalc#Complete()|


========================================================================
plugin/tcalc.vim~

                                                    *:TCalc*
TCalc[!]
    With !, reset stack & input queue.


========================================================================
autoload/tcalc.vim~

                                                    *g:tcalc_initialize*
g:tcalc_initialize
    A string that will be read when first invoking |:TCalc|.
    Define some abbreviations. Use 'ls' to see them.

                                                    *g:tcalc_lines*
g:tcalc_lines                  (default: 10)
    The height of the window. If negative, use fixed height.

                                                    *g:tcalc_dir*
g:tcalc_dir                    (default: fnamemodify('~/.tcalc', ':p'))
    The default directory where "source" finds files.

                                                    *tcalc#Calculator()*
tcalc#Calculator(reset, initial_args)

                                                    *tcalc#Eval()*
tcalc#Eval(initial_args)

                                                    *tcalc#Complete()*
tcalc#Complete(ArgLead, CmdLine, CursorPos)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
