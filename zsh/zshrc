#!/usr/bin/zsh

fpath=($HOME/.zsh/func $fpath)
typeset -U fpath

r() {
  local f; f=($HOME/.zsh/func/*(.))
  unfunction $f:t 2> /dev/null
  autoload -U $f:t
}

# Emacs Mode
bindkey -e
# VI Mode
# bindkey -v

setopt auto_pushd
setopt menucomplete
setopt inc_append_history append_history share_history
setopt hist_ignore_dups hist_ignore_all_dups
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zhistory

# Ubuntu Linux LS_COLORS
MY_LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:';

# # SSH AGENT
# export SSH_ENV=~/.ssh/start_agent
# function start_agent {
#   echo "Initializing new SSH agent..."
#   /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
#   echo succeeded
#   chmod 600 "${SSH_ENV}"
#   . "${SSH_ENV}" > /dev/null
#   /usr/bin/ssh-add;
# }
# # Source SSH settings, if applicable
# if [ -f "${SSH_ENV}" ]; then
#   . "${SSH_ENV}" > /dev/null
#   #ps ${SSH_AGENT_PID} doesn't work under cywgin
#   ps -eA | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#     start_agent;
#   }
# else
#   start_agent;
# fi

# Sets the screen window title with the name of the command you are running
#preexec () { echo -ne "\ek${1%% *}\e\\" }

# Set color variables with helpful names

# Prompt
# ======
setopt promptsubst
autoload -U promptinit && promptinit
# Run prompt -h for help # prompt wunjo for git aware

autoload -U colors zsh/terminfo && colors
# Super Minimalistic
PS1="%{$fg_bold[green]%}%(!.#.$)%{$reset_color%} "

# Right Justified Prompt
# ======================
# Date Time
#RPS1="(%D{%m-%d %H:%M})"
# Current Directory
local TERMWIDTH
(( TERMWIDTH = ${COLUMNS} - 1 ))
local PROMPTSIZE=${#${(%):--- %D{%R.%S %a %b %d %Y}\! }}
local PWDSIZE=${#${(%):-%~}}
if [[ "$PROMPTSIZE + $PWDSIZE" -gt $TERMWIDTH ]]; then
  (( PR_PWDLEN = $TERMWIDTH - $PROMPTSIZE ))
fi
RPS1="%{$fg_bold[cyan]%}%${PR_PWDLEN}<...<%~%<<%{$reset_color%}"

# MacOS Specific Settings
uname -a | grep -qs Darwin
if [ $? -eq 0 ]; then
	export PATH=/opt/local/bin:$PATH
  # sudo port install coreutils +with_default_names
  # to get the following to work in OSX
  # eval "`/opt/local/bin/dircolors -b`"
  export LS_COLORS=$MY_LS_COLORS
  alias ls='ls --color=auto'
	alias gvim=mvim
	alias vim='TERM=xterm+256color /Applications/MacVim.app/Contents/MacOS/Vim'
  export EDITOR='TERM=xterm+256color /Applications/MacVim.app/Contents/MacOS/Vim'
else
	# Linux
  eval "`dircolors -b`"
  alias ls='ls --color=auto'
	alias vim='TERM=xterm-256color vim'
  export EDITOR='TERM=xterm-256color vim'

	alias rm='mv --verbose -i --target-directory ~/.Trash/'
	alias empty='/bin/rm -rvf ~/.Trash/* ; /bin/rm -rvf ~/.Trash/.*'
fi

# Aliases

# Rename files recursively in the current dir and replace space with _
autoload -U zmv
alias space2under='zmv -Q "(**/)(* *)(D)" "\$1\${2// /_}"'

alias w="w|sed -e '/^USER.*$/d'|sort|less"

alias grep='grep -i --color=auto'
alias randmac="head /dev/urandom | openssl md5 | sed 's/\(..\)/\1:/g' | cut -c1-17"

alias xdef='xrdb -load ~/.Xdefaults'

alias lltr='ll -tr'
alias lla='ls -lhA'
alias ll='ls -lh'
alias la='ls -A'
alias l='ls -CF'

alias mutt='TERM=xterm-256color mutt'

alias gl='git log'
alias gll='git log --pretty=oneline'
alias gs='git status'
alias gc='git commit'
alias gca='git commit -av'
alias gd='git diff'

alias d='dirs -v'
alias p='pushd'
alias o='popd'

alias h='history 1'

alias du='du -hsc'
alias df='df -hTP'

# GTD Stuff
# alias t='vim ~/Notes/GTD.mkd'
# alias tg='gvim ~/Notes/GTD.mkd'
# alias today='grep `date +%m/%d` ~/Notes/GTD.mkd'

alias cjob='qsub -l walltime=02:00:00 -l nodes=1:ppn=8 -N compiling -j oe -I'
alias cj='checkjob -v'

### Variables
export PATH=$HOME/Preferences/bin:$PATH
export PATH=$HOME/apps/ctags/bin:$PATH
export PATH=$HOME/apps/git/bin:$PATH
export PATH=$HOME/apps/vim/bin:$PATH

# Auth your sshkey with another server
function authme {
    ssh $@ 'cat >>.ssh/authorized_keys' <~/.ssh/id_rsa.pub
}

function setupenv {
  pushd ~
	rsync -avLK --delete --exclude mthesaur-vim.txt .gitconfig .vim .vimrc .zsh .zshrc .screenrc $@:~/
  popd
}

bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word

# Typical delete keys
#bindkey '^H' backward-delete-char
#bindkey '^?' backward-delete-char

bindkey '^r' history-incremental-search-backward

bindkey '^I' complete-word # complete on tab, leave expansion to _expand
# bindkey ' ' magic-space    # also do history expansion on space

bindkey '^K' push-line # push current command into a buffer, allows you to do another command then returns to previous command

autoload zkbd
typeset -A key
    key[Home]=${terminfo[khome]}
     key[End]=${terminfo[kend]}
  key[Insert]=${terminfo[kich1]}
  key[Delete]=${terminfo[kdch1]}
      key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
   key[Right]=${terminfo[kcuf1]}
  key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

for k in ${(k)key} ; do
    # $terminfo[] entries are weird in ncurses application mode...
    [[ ${key[$k]} == $'\eO'* ]] && key[$k]=${key[$k]/O/[}
done
unset k

# [[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
# [[ -n ${key[Insert]}    ]] && bindkey "${key[Insert]}"    overwrite-mode
  [[ -n ${key[Home]}      ]] && bindkey "${key[Home]}"      beginning-of-line
  [[ -n ${key[End]}       ]] && bindkey "${key[End]}"       end-of-line
# [[ -n ${key[PageUp]}    ]] && bindkey "${key[PageUp]}"    up-line-or-history
# [[ -n ${key[PageDown]}  ]] && bindkey "${key[PageDown]}"  down-line-or-history
  [[ -n ${key[Delete]}    ]] && bindkey "${key[Delete]}"    delete-char
# [[ -n ${key[Up]}        ]] && bindkey "${key[Up]}"        up-line-or-search
# [[ -n ${key[Left]}      ]] && bindkey "${key[Left]}"      backward-char
# [[ -n ${key[Down]}      ]] && bindkey "${key[Down]}"      down-line-or-search
# [[ -n ${key[Right]}     ]] && bindkey "${key[Right]}"     forward-char

# Completion

# The following lines were added by compinstall
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' insert-unambiguous false
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle :compinstall filename '/Users/adigiro/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name ''

zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

zstyle ':completion:*' list-colors ${(s.:.)MY_LS_COLORS}

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'

# kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:*:kill:*:processes' command 'ps -A' # 'ps --forest -A -o pid,user,cmd'

# Custom Completion Functions

_use_completion() {
  if [[ -e /packages/usepackage-1.8/bin/usepackage ]]; then
    reply=(`/packages/usepackage-1.8/bin/usepackage -l 2>&1 | sed -e '/^\S/      d' -e '/^$/d' -e 's/^   //g' -e 's/\s-\s.*//g'`)
  fi
}
compctl -K _use_completion use

# Completion Notes
# ----------------
# Case Insensitive with -M
#   compctl -M 'm:{a-zA-Z}={A-Za-z}' -K function command
# Replace tab completion text with results with -U
#   compctl -U -K function command
# Function Name begins with '_' use 'read -l'
#   read -l query
#   query=${query/gn /} # Delete 'gn ' from the query variable
# Function Name does NOT begin with '_'
#   echo $@
#
# if [[ -e $HOME/Notes/$@ ]]; then # Check file existence first
# fi

# Replacing / with \/ in the HOME variable so that sed can search for '/'
# sed -e "s/${HOME//\//\\/}\/Notes\///"

# Getting the length of a variable and subtracting 1
# query=$@
# print $((${#query} - 1))

note_directory=$HOME/Notes
note_directory_escaped=${note_directory//\//\\/}\\\/

note_filename_completion() {
  reply=(`find -L $note_directory | sed -e "s/$note_directory_escaped//"`)
}
note_grep_completion() {
  reply=(`grep -Iirls --exclude="*\.log" --exclude="*bz2" --exclude="*gz" "$@" $note_directory | sed -e "s/$note_directory_escaped//"`)
}

# Edit or Create Note
n() { vim $note_directory/$@ }
# Copy Notes
cn() { cat "$note_directory/$@" | pbcopy }

compctl -M 'm:{a-zA-Z}={A-Za-z}' -K note_filename_completion -J names -X '%BFile Names' -t+ + -U -K note_grep_completion -J grep -X '%BGrep Notes' n
compctl -M 'm:{a-zA-Z}={A-Za-z}' -K note_filename_completion -J names -X '%BFile Names' -t+ + -U -K note_grep_completion -J grep -X '%BGrep Notes' cn

# RVM Source
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

